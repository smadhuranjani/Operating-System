#include <stdio.h>

#define MAX_PROCESSES 10


void roundRobin(int processes[], int n, int burst_time[], int time_quantum) {
    int remaining_time[MAX_PROCESSES];
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    int t = 0; // Current time
    while (1) {
        int done = 1; // Flag to check if all processes are done

        
        for (int i = 0; i < n; i++) {
          
            if (remaining_time[i] > 0) {
                done = 0; 

                
                if (remaining_time[i] > time_quantum) {
                    t += time_quantum;
                    remaining_time[i] -= time_quantum;
                } else {
                    t += remaining_time[i];
                    remaining_time[i] = 0;
                }

               
                printf("Process %d executed at time %d\n", i + 1, t);
            }
        }

       
        if (done == 1) {
            break;
        }
    }
}

int main() {
    int n; // Number of processes
    int processes[MAX_PROCESSES]; // Process IDs
    int burst_time[MAX_PROCESSES]; // Burst times
    int time_quantum; // Time quantum

    
    printf("Enter the number of processes: ");
    scanf("%d", &n);

   
    printf("Enter the process IDs and burst times:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d ID: ", i + 1);
        scanf("%d", &processes[i]);
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    
    roundRobin(processes, n, burst_time, time_quantum);

    return 0;
}
